initSidebarItems({"fn":[["__breakpoint","Inserts a breakpoint instruction."],["__clrex","Removes the exclusive lock created by LDREX"],["__dbg","Generates a DBG instruction."],["__dmb","Generates a DMB (data memory barrier) instruction or equivalent CP15 instruction."],["__dsb","Generates a DSB (data synchronization barrier) instruction or equivalent CP15 instruction."],["__isb","Generates an ISB (instruction synchronization barrier) instruction or equivalent CP15 instruction."],["__ldrex","Executes a exclusive LDR instruction for 32 bit value."],["__ldrexb","Executes a exclusive LDR instruction for 8 bit value."],["__ldrexh","Executes a exclusive LDR instruction for 16 bit value."],["__nop","Generates an unspecified no-op instruction."],["__qadd","Signed saturating addition"],["__qadd16","Saturating two 16-bit integer additions"],["__qadd8","Saturating four 8-bit integer additions"],["__qasx","Returns the 16-bit signed saturated equivalent of"],["__qdbl","Insert a QADD instruction"],["__qsax","Returns the 16-bit signed saturated equivalent of"],["__qsub","Signed saturating subtraction"],["__qsub16","Saturating two 16-bit integer subtraction"],["__qsub8","Saturating two 8-bit integer subtraction"],["__rsr","Reads a 32-bit system register"],["__rsrp","Reads a system register containing an address"],["__sadd16","Returns the 16-bit signed saturated equivalent of"],["__sadd8","Returns the 8-bit signed saturated equivalent of"],["__sasx","Returns the 16-bit signed equivalent of"],["__sel","Select bytes from each operand according to APSR GE flags"],["__sev","Generates a SEV (send a global event) hint instruction."],["__shadd16","Signed halving parallel halfword-wise addition."],["__shadd8","Signed halving parallel byte-wise addition."],["__shsub16","Signed halving parallel halfword-wise subtraction."],["__shsub8","Signed halving parallel byte-wise subtraction."],["__smlabb","Insert a SMLABB instruction"],["__smlabt","Insert a SMLABT instruction"],["__smlad","Dual 16-bit Signed Multiply with Addition of products and 32-bit accumulation."],["__smlatb","Insert a SMLATB instruction"],["__smlatt","Insert a SMLATT instruction"],["__smlawb","Insert a SMLAWB instruction"],["__smlawt","Insert a SMLAWT instruction"],["__smlsd","Dual 16-bit Signed Multiply with Subtraction  of products and 32-bit accumulation and overflow detection."],["__smuad","Signed Dual Multiply Add."],["__smuadx","Signed Dual Multiply Add Reversed."],["__smulbb","Insert a SMULBB instruction"],["__smulbt","Insert a SMULTB instruction"],["__smultb","Insert a SMULTB instruction"],["__smultt","Insert a SMULTT instruction"],["__smulwb","Insert a SMULWB instruction"],["__smulwt","Insert a SMULWT instruction"],["__smusd","Signed Dual Multiply Subtract."],["__smusdx","Signed Dual Multiply Subtract Reversed."],["__ssub8","Inserts a `SSUB8` instruction."],["__strex","Executes a exclusive STR instruction for 32 bit values"],["__strexb","Executes a exclusive STR instruction for 8 bit values"],["__strexh","Executes a exclusive STR instruction for 16 bit values"],["__usad8","Sum of 8-bit absolute differences."],["__usada8","Sum of 8-bit absolute differences and constant."],["__usub8","Inserts a `USUB8` instruction."],["__wfe","Generates a WFE (wait for event) hint instruction, or nothing."],["__wfi","Generates a WFI (wait for interrupt) hint instruction, or nothing."],["__wsr","Writes a 32-bit system register"],["__wsrp","Writes a system register containing an address"],["__yield","Generates a YIELD hint instruction."],["_clz_u16","Count Leading Zeros."],["_clz_u32","Count Leading Zeros."],["_clz_u8","Count Leading Zeros."],["_rbit_u32","Reverse the bit order."],["_rev_u16","Reverse the order of the bytes."],["_rev_u16","Reverse the order of the bytes."],["_rev_u32","Reverse the order of the bytes."],["_rev_u32","Reverse the order of the bytes."],["udf","Generates the trap instruction `UDF`"]],"struct":[["APSR","Application Program Status Register"],["ISH","Inner Shareable is the required shareability domain, reads and writes are the required access types"],["ISHST","Inner Shareable is the required shareability domain, writes are the required access type"],["NSH","Non-shareable is the required shareability domain, reads and writes are the required access types"],["NSHST","Non-shareable is the required shareability domain, writes are the required access type"],["OSH","Outer Shareable is the required shareability domain, reads and writes are the required access types"],["OSHST","Outer Shareable is the required shareability domain, writes are the required access type"],["ST","Full system is the required shareability domain, writes are the required access type"],["SY","Full system is the required shareability domain, reads and writes are the required access types"],["int16x2_t","ARM-specific 32-bit wide vector of two packed `i16`."],["int8x4_t","ARM-specific 32-bit wide vector of four packed `i8`."],["uint16x2_t","ARM-specific 32-bit wide vector of two packed `u16`."],["uint8x4_t","ARM-specific 32-bit wide vector of four packed `u8`."]]});