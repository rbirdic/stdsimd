var N=null,E="",T="t",U="u",searchIndex={};
var R=["core_arch","result","try_from","try_into","borrow","borrow_mut","type_id","typeid","formatter","vector_signed_long","vector_unsigned_long","vector_bool_long","vector_double","std_detect"];
searchIndex[R[13]]={"doc":"Run-time feature detection for the Rust standard library.","i":[[14,"is_x86_feature_detected",R[13],"Prevents compilation if `is_x86_feature_detected` is used…",N,N],[14,"is_arm_feature_detected",E,"Prevents compilation if `is_arm_feature_detected` is used…",N,N],[14,"is_aarch64_feature_detected",E,"Prevents compilation if `is_aarch64_feature_detected` is…",N,N],[14,"is_powerpc64_feature_detected",E,"Prevents compilation if `is_powerpc64_feature_detected` is…",N,N],[14,"is_mips_feature_detected",E,"Prevents compilation if `is_mips_feature_detected` is used…",N,N],[14,"is_mips64_feature_detected",E,"Prevents compilation if `is_mips64_feature_detected` is…",N,N],[14,"is_powerpc_feature_detected",E,"Checks if `powerpc` feature is enabled.",N,N]],"p":[]};
searchIndex[R[0]]={"doc":"SIMD and vendor intrinsics module.","i":[[0,"powerpc",R[0],"Platform-specific intrinsics for the `PowerPC` platform.",N,N],[3,R[9],"core_arch::powerpc","PowerPC-specific 128-bit wide vector of two packed `i64`",N,N],[3,R[10],E,"PowerPC-specific 128-bit wide vector of two packed `u64`",N,N],[3,R[11],E,"PowerPC-specific 128-bit wide vector mask of two elements",N,N],[3,R[12],E,"PowerPC-specific 128-bit wide vector of two packed `f64`",N,N],[5,"vec_xxpermdi",E,"Vector permute.",N,[[["u8"],[T]],[T]]],[5,"trap",E,"Generates the trap instruction `TRAP`",N,[[]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[2],E,E,0,[[[U]],[R[1]]]],[11,R[3],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[R[7]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[2],E,E,1,[[[U]],[R[1]]]],[11,R[3],E,E,1,[[],[R[1]]]],[11,"into",E,E,1,[[],[U]]],[11,R[4],E,E,1,[[["self"]],[T]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[R[7]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[2],E,E,2,[[[U]],[R[1]]]],[11,R[3],E,E,2,[[],[R[1]]]],[11,"into",E,E,2,[[],[U]]],[11,R[4],E,E,2,[[["self"]],[T]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[R[7]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[2],E,E,3,[[[U]],[R[1]]]],[11,R[3],E,E,3,[[],[R[1]]]],[11,"into",E,E,3,[[],[U]]],[11,R[4],E,E,3,[[["self"]],[T]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[8]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[8]]],[R[1]]]],[11,"fmt",E,E,2,[[["self"],[R[8]]],[R[1]]]],[11,"fmt",E,E,3,[[["self"],[R[8]]],[R[1]]]],[11,"clone",E,E,0,[[["self"]],[R[9]]]],[11,"clone",E,E,1,[[["self"]],[R[10]]]],[11,"clone",E,E,2,[[["self"]],[R[11]]]],[11,"clone",E,E,3,[[["self"]],[R[12]]]]],"p":[[3,R[9]],[3,R[10]],[3,R[11]],[3,R[12]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);